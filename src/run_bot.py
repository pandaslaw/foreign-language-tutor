import random
import time
from logging import getLogger
from threading import Thread

import telebot
from telebot.types import Message

from src.config import app_settings
from src.dal import MessagesRepository, UsersRepository
from src.utils import generate_answer

logger = getLogger(__name__)

bot = telebot.TeleBot(app_settings.TELEGRAM_BOT_TOKEN)

phrases = [
    ("Merhaba", "–ü—Ä–∏–≤–µ—Ç"),
    ("Te≈üekk√ºr ederim", "–°–ø–∞—Å–∏–±–æ"),
    ("Nasƒ±lsƒ±n?", "–ö–∞–∫ –¥–µ–ª–∞?"),
]

questions = [
    ("–ö–∞–∫ –Ω–∞ —Ç—É—Ä–µ—Ü–∫–æ–º '–ü—Ä–∏–≤–µ—Ç'?", "Merhaba"),
    ("–ö–∞–∫ –Ω–∞ —Ç—É—Ä–µ—Ü–∫–æ–º '–°–ø–∞—Å–∏–±–æ'?", "Te≈üekk√ºr ederim"),
]


@bot.message_handler(commands=["start"])
def send_welcome(message: Message):
    bot.send_message(message.chat.id, "Merhaba! –ú–µ–Ω—è –∑–æ–≤—É—Ç –õ–µ–π–ª–∞. –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —É—á–∏—Ç—å —Ç—É—Ä–µ—Ü–∫–∏–π –≤–º–µ—Å—Ç–µ! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    bot.register_next_step_handler(message, save_name)


def save_name(message: Message):
    name = message.text
    user_id = message.from_user.id

    UsersRepository.create_user(name, user_id)

    bot.send_message(message.chat.id,
                     f"–û—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ, {name}! –ü–æ—á–µ–º—É —Ç—ã —Ö–æ—á–µ—à—å –≤—ã—É—á–∏—Ç—å —Ç—É—Ä–µ—Ü–∫–∏–π? –ß—Ç–æ –æ–∂–∏–¥–∞–µ—à—å –æ—Ç –æ–±—É—á–µ–Ω–∏—è?")
    bot.register_next_step_handler(message, save_goal)


def save_goal(message: Message):
    goal = message.text
    user_id = message.from_user.id

    UsersRepository.update_goal(user_id, goal)

    bot.send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω–æ! –Ø –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∞ –ø–ª–∞–Ω, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—å —Ç–≤–æ–∏—Ö —Ü–µ–ª–µ–π.")


@bot.message_handler(commands=["daily_phrase"])
def send_daily_phrase(message: Message):
    phrase, translation = random.choice(phrases)
    bot.send_message(message.chat.id, f"üìö –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Ñ—Ä–∞–∑–∞:\n\n{phrase} ‚Äì {translation}")


@bot.message_handler(commands=["quiz"])
def ask_question(message: Message):
    question, correct_answer = random.choice(questions)
    bot.send_message(message.chat.id, question)
    bot.register_next_step_handler(message, lambda msg: check_answer(msg, correct_answer))


def check_answer(message: Message, correct_answer: str):
    if message.text.strip().lower() == correct_answer.lower():
        bot.send_message(message.chat.id, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ú–æ–ª–æ–¥–µ—Ü!")
    else:
        bot.send_message(message.chat.id, f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")


def remind_task(chat_id):
    while True:
        time.sleep(24 * 60 * 60)  # 24 —á–∞—Å–∞
        bot.send_message(chat_id, "üïê –ü–æ—Ä–∞ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Ç—É—Ä–µ—Ü–∫–∏–º! –í–≤–µ–¥–∏ /quiz –∏–ª–∏ /daily_phrase.")


def start_reminder(chat_id):
    reminder_thread = Thread(target=remind_task, args=(chat_id,))
    reminder_thread.start()


@bot.message_handler(commands=["start_reminder"])
def start_reminder_handler(message: Message):
    bot.send_message(message.chat.id, "–ó–∞–ø—É—Å–∫–∞—é –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
    start_reminder(message.chat.id)


# @bot.message_handler(func=lambda msg: True)
# def log_and_respond(message: Message):
#     MessagesRepository.save_message(message.from_user.id, message.text)
#     bot.send_message(message.chat.id, "–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ!")


@bot.message_handler(commands=["exercise"])
def start_exercise(message):
    bot.send_message(message.chat.id, "üìö –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ. –ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ —Ç—ã –Ω–∞ —Ç—É—Ä–µ—Ü–∫–æ–º?")
    user_id = message.from_user.id
    chat_history = []

    bot.register_next_step_handler(message, lambda msg: handle_exercise(msg, user_id, chat_history))


def handle_exercise(message, user_id, chat_history):
    user_message = message.text

    llm_response = generate_answer(user_message, chat_history=chat_history)
    chat_history.append({"role": "user", "content": user_message})

    bot.send_message(message.chat.id, llm_response)

    MessagesRepository.save_message(user_id, user_message)
    MessagesRepository.save_message(user_id, llm_response, is_llm=True)

    bot.register_next_step_handler(message, lambda msg: handle_exercise(msg, user_id, chat_history))


if __name__ == "__main__":
    logger.info("~~~Send any message to a bot to start chatting~~~")
    bot.infinity_polling()
